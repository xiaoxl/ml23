{
  "hash": "96c72dc70d7d1b12ff547f64ea0cb3cb",
  "result": {
    "markdown": "# k-Nearest Neighbors algorithm (k-NN)\nThis algorithm is different from other algorithms covered in this course, that it doesn't really extract features from the data. However, since its idea is easy to understand, we use it as our first step towards machine learning world.\n\nSimilar to other algorithms, we will only cover the beginning part of the algorithm. All later upgrades of the algorithms are left for yourselves to learn.\n\nReferences: {cite:p}`Har2012`.\n\n\n\n\n\n# k-Nearest Neighbors Algorithm (k-NN)\n\n## Ideas\nAssume that we have a set of labeled data $\\{(X_i, y_i)\\}$ where $y_i$ denotes the label. Given a new data $X$, how do we determine the label of it? \n\nk-NN algorithm starts from a very straightforward idea. We use the distances from the new data point $X$ to the known data points to identify the label. If $X$ is closer to $y_i$ points, then we will label $X$ as $y_i$. \n\nLet us take cities and countries as an example. <span style=\"color:red\">New York</span> and <span style=\"color:red\">Los Angeles</span> are U.S cities, and <span style=\"color:grey\">Beijing</span> and <span style=\"color:grey\">Shanghai</span> are Chinese cities. Now we would like to consider Tianjin and Russellville. Do they belong to China or U.S? We calculate the distances from Tianjin (resp. Russellville) to all four known cities. Since Tianjin is closer to <span style=\"color:grey\">Beijing</span> and <span style=\"color:grey\">Shanghai</span> comparing to <span style=\"color:red\">New York</span> and <span style=\"color:red\">Los Angeles</span>, we classify Tianjin as a Chinese city. Similarly, since Russellville is closer to <span style=\"color:red\">New York</span> and <span style=\"color:red\">Los Angeles</span> comparing to <span style=\"color:grey\">Beijing</span> and <span style=\"color:grey\">Shanghai</span>, we classify it as a U.S. city.\n\n\n\n\n```{dot}\ndigraph G {\n    layout=circo\n\n    Beijing [color=black]\n    Shanghai [color=black]\n    Tianjin [color=blue, fontcolor=black, shape=box]\n\n    \"New York\" [color=red, fontcolor=red]\n    \"Los Angelis\" [color=red, fontcolor=red]\n    Russellville [color=blue, fontcolor=red, shape=box]\n\n\n \n    Tianjin -> Beijing [label=\"closer\"];\n    Tianjin -> Shanghai [label=\"closer   \"];\n    Tianjin -> \"New York\" [style=dashed, color=blue, fontcolor=blue, label=\" far away\"];\n    Tianjin -> \"Los Angelis\" [style=dashed, color=blue, fontcolor=blue, label=\" far away\"];\n    Russellville -> \"New York\" [color=red, label=\"closer  \", fontcolor=red];\n    Russellville -> \"Los Angelis\" [color=red, label=\"closer\", fontcolor=red];\n    Russellville -> Beijing [color=red, style=dashed, color=blue, label=\"far away \", fontcolor=blue];\n    Russellville -> Shanghai [color=red, style=dashed, color=blue, label=\"far away\", fontcolor=blue];\n}\n```\n\n\nThis naive example explains the idea of k-NN. Here is a more detailed description of the algorithm. \n\n## The Algorithm\n\n```{prf:algorithm} k-NN Classifier\n**Inputs** Given the training data set $\\{(X_i, y_i)\\}$ where $X_i=(x_i^1,x_i^2,\\ldots,x_i^n)$ represents $n$ features and $y_i$ represents labels. Given a new data point $\\tilde{X}=(\\tilde{x}^1,\\tilde{x}^2,\\ldots,\\tilde{x}^n)$.\n\n**Outputs** Want to find the best label for $\\tilde{X}$.\n\n1. Compute the distance from $\\tilde{X}$ to each $X_i$.\n2. Sort all these distances from the nearest to the furthest. \n3. Find the nearest $k$ data points.\n4. Determine the labels for each of these $k$ nearest points, and compute the frenqucy of each labels.\n5. The most frequent label is considered to be the label of $\\tilde{X}$.\n```\n## Details\n- The distance between two data points are defined by the Euclidean distance:\n  \n\\begin{equation}\ndist\\left((x^j_i)_{j=1}^n, (\\tilde{x}^j)_{j=1}^n\\right)=\\sqrt{\\sum_{j=1}^n(x^j_i-\\tilde{x}^j)^2}.\n\\end{equation}\n  \n- Using linear algebra notations: \n  \n\\begin{equation}\ndist(X_i,\\tilde{X})=\\sqrt{(X_i-\\tilde{X})\\cdot(X_i-\\tilde{X})}.\n\\end{equation}\n\n- All the distances are stored in a $1$-dim numpy array, and we will combine it together with another $1$-dim array that store the labels of each point.\n\n## The codes\n- `argsort`\n- `get`\n- `sorted`\n\n```python\ndef classify_kNN(inX, X, y, k):\n    # create a new 2-d numpy array by copying inX for each row.\n    Xmat = np.tile(np.array([inX]), (X.shape[0], 1))\n    # compute the distance between each row of X and Xmat\n    Dmat = np.sqrt(np.sum((Xmat - X)**2, axis=1))\n    # sort by distance\n    sortedlist = Dmat.argsort()\n    # count the freq. of the first k items\n    k = min(k, len(sortedlist))\n    classCount = dict()\n    for i in sortedlist[:k]:\n        classCount[y[i]] = classCount.get(y[i], 0) + 1\n    # find out the most freqent one\n    sortedCount = sorted(classCount.items(), key=lambda x:x[1],\n                         reverse=True)\n    return sortedCount[0][0]\n```\n\n## `sklearn` packages\nYou may also directly use the kNN function `KNeighborsClassifier` packaged in `sklearn.neighbors`. You may check the description of the function online from [here](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html).\n\nThere are many ways to modify the kNN algorithm. What we just mentioned is the simplest idea. It is correspondent to the argument `weights='uniform'`, `algorithm='brute` and `metric='euclidean'`. However due to the implementation details, the results we got from `sklearn` are still a little bit different from the results produced by our naive codes.\n\n```python\nfrom sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors=10, weights='uniform', algorithm='brute',\n                             metric='euclidean')\nclf.fit(X_train, y_train)\ny_pred = ckf.predict(X_test)\n```\n\n\n## Normalization\nDifferent features may have different scales. It might be unfair for those features that have small scales. Therefore usually it is better to rescale all the features to make them have similar scales. After examining all the data, we find the minimal value `minVal` and the range `ranges` for each column. The normalization formula is:\n\n$$X_{norm} = \\frac{X_{original}-minVal}{ranges}.$$\n\nWe could also convert the normalized number back to the original value by \n\n$$X_{original} = X_{norm} \\times ranges + minVal.$$\n\nThe sample codes are listed below.\n\n```python\ndef encodeNorm(X, parameters=None):\n    # parameters contains minVals and ranges\n    if parameters is None:\n        minVals = np.min(X, axis=0)\n        maxVals = np.max(X, axis=0)\n        ranges = np.maximum(maxVals - minVals, np.ones(minVals.size))\n        parameters = {'ranges': ranges, 'minVals': minVals}\n    else:\n        minVals = parameters['minVals']\n        ranges = parameters['ranges']\n    Nmat = np.tile(minVals, (X.shape[0], 1))\n    Xnorm = (X - Nmat)/ranges\n    return (Xnorm, parameters)\n\n\ndef decodeNorm(X, parameters):\n    # parameters contains minVals and ranges\n    ranges = parameters['ranges']\n    minVals = parameters['minVals']\n    Nmat = np.tile(minVals, (X.shape[0], 1))\n    Xoriginal = X * ranges + Nmat\n    return Xoriginal\n```\n\n\n# k-NN Project 1: `iris` Classification\n\nThis data is from `sklearn.datasets`. This dataset consists of 3 different types of irises' petal / sepal length / width, stored in a $150\\times4$ `numpy.ndarray`. We already explored the dataset briefly in the previous chapter. This time we will try to use the feature provided to predict the type of the irises. For the purpose of plotting, we will only use the first two features: `sepal length` and `sepal width`.\n\n## Explore the dataset\nWe first load the dataset. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn import datasets\niris = datasets.load_iris()\nX = iris.data[:, :2]\ny = iris.target\n```\n:::\n\n\nThen we would like to split the dataset into trainning data and test data. Here we are going to use `sklearn.model_selection.train_test_split` function. Besides the dataset, we should also provide the propotion of the test set comparing to the whole dataset. We will choose `test_size=0.1` here, which means that the size of the test set is 0.1 times the size of the whole dataset. `stratify=y` means that when split the dataset we want to split respects the distribution of labels in `y`. \n\nThe split will be randomly. You may set the argument `random_state` to be a certain number to control the random process. If you set a `random_state`, the result of the random process will stay the same. This is for reproducible output across multiple function calls.\n\n\nAfter we get the training set, we should also normalize it. All our normalization should be based on the training set. When we want to use our model on some new data points, we will use the same normalization parameters to normalize the data points in interests right before we apply the model. Here since we mainly care about the test set, we could normalize the test set at this stage.\n\nNote that in the following code, I import functions `encodeNorm` from `assests.codes.knn`. You need to modify this part based on your file structure. See [here](section:applyourknn) for more details.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom assests.codes.knn import encodeNorm\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1, stratify=y)\n\nX_train_norm, parameters = encodeNorm(X_train)\nX_test_norm, _ = encodeNorm(X_test, parameters=parameters)\n```\n:::\n\n\nBefore we start to play with k-NN, let us look at the data first. Since we only choose two features, it is able to plot these data points on a 2D plane, with different colors representing different classes. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Plot the scatter plot.\nfig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train)\n\n# Generate legends.\nlabels = ['setosa', 'versicolor', 'virginica']\nfig.legend(handles=scatter.legend_elements()[0], labels=labels,\n           loc=\"right\", title=\"Labels\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-pdf/cell-4-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n(section:applyourknn)=\n## Apply our k-NN model \n\nNow let us apply k-NN to this dataset. We first use our codes. Here I use `from assests.codes.knn` to import our functions since I put all our functions in `./assests/codes/knn.py`. Then the poential code is \n```python\ny_pred = classify_kNN(X_test, X_train, y_train, k=10)\n```\n\nNote that the above code is actually wrong. The issue ist that our function `classify_kNN` can only classify one row of data. To classify many rows, we need to use a `for` loop. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom assests.codes.knn import classify_kNN\n\nn_neighbors = 10\ny_pred = list()\nfor row in X_test_norm:\n    row_pred = classify_kNN(row, X_train_norm, y_train, k=n_neighbors)\n    y_pred.append(row_pred)\ny_pred = np.array(y_pred)\n```\n:::\n\n\nWe could use list comprehension to simply the above codes. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom assests.codes.knn import classify_kNN\n\nn_neighbors = 10\ny_pred = np.array([classify_kNN(row, X_train_norm, y_train, k=n_neighbors)\n                   for row in X_test_norm])\n```\n:::\n\n\nThis `y_pred` is the result we got for the test set. We may compare it with the real answer `y_test`, and calcuate the accuracy.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nacc = np.mean(y_pred == y_test)\nprint(acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.7333333333333333\n```\n:::\n:::\n\n\n## Apply k-NN model from `sklearn`\n\nNow we would like to use `sklearn` to reproduce this result. Since our data is prepared, what we need to do is directly call the functions.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.neighbors import KNeighborsClassifier\nn_neighbors = 10\nclf = KNeighborsClassifier(n_neighbors, weights=\"uniform\", metric=\"euclidean\",\n                           algorithm='brute')\nclf.fit(X_train_norm, y_train)\ny_pred_sk = clf.predict(X_test_norm)\n\nacc = np.mean(y_pred_sk == y_test)\nprint(acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.7333333333333333\n```\n:::\n:::\n\n\n## Using data pipeline\nWe may organize the above process in a neater way. After we get a data, the usual process is to apply several transforms to the data before we really get to the model part. Using terminolgies from `sklearn`, the former are called *transforms*, and the latter is called an *estimator*. In this example, we have exactly one tranform which is the normalization. The estimator here we use is the k-NN classifier. \n\n`sklearn` provides a standard way to write these codes, which is called `pipeline`. We may chain the transforms and estimators in a sequence and let the data go through the pipeline. In this example, the pipeline contains two steps:\n1. The normalization transform `sklearn.preprocessing.MinMaxScaler`. When we directly apply it the parameters `ranges` and `minVals` and  will be recorded automatically, and we don't need to worry about it when we want to use the same parameters to normalize other data.\n2. The k-NN classifier `sklearn.neighbors.KNeighborsClassifier`. This is the same one as we use previously.\n\nThe code is as follows. It is a straightforward code. Note that the `()` after the class in each step of `steps` is very important. The codes cannot run if you miss it.\n\nAfter we setup the pipeline, we may use it as other estimators since it is an estimator. Here we may also use the accuracy function provided by `sklearn` to perform the computation. It is essentially the same as our `acc` computation.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score\n\nsteps = [('scaler', MinMaxScaler()),\n         ('knn', KNeighborsClassifier(n_neighbors, weights=\"uniform\",\n                                      metric=\"euclidean\", algorithm='brute'))]\npipe = Pipeline(steps=steps)\npipe.fit(X_train, y_train)\ny_pipe = pipe.predict(X_test)\nprint(accuracy_score(y_pipe, y_test))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.7333333333333333\n```\n:::\n:::\n\n\n## Visualize the Decision boundary\nUsing the classifier we get above, we are able to classify every points on the plane. This enables us to draw the following plot, which is called the Decision boundary. It helps us to visualize the relations between features and the classes.\n\nWe use `DecisionBoundaryDisplay` from `sklearn.inspection` to plot the decision boundary. The function requires us to have a fitted classifier. We may use the classifier `pipe` we got above. Note that this classifier should have some build-in structures that our `classify_kNN` function doesn't have. We may rewrite our codes to make it work, but this goes out of the scope of this section. This is supposed to be Python programming exercise. We will talk about it in the future if we have enough time.\n\nWe first plot the dicision boundary using `DecisionBoundaryDisplay.from_estimator`. Then we plot the points from `X_test`. From the plot it is very clear which points are misclassified.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.inspection import DecisionBoundaryDisplay\n\ndisp = DecisionBoundaryDisplay.from_estimator(\n            pipe, \n            X_train,\n            response_method=\"predict\",\n            plot_method=\"pcolormesh\",\n            xlabel=iris.feature_names[0],\n            ylabel=iris.feature_names[1],\n            alpha=0.5)\ndisp.ax_.scatter(X_test[:, 0], X_test[:, 1], c=y_test, edgecolor=\"k\")\ndisp.figure_.set_size_inches((10,7))\n```\n\n::: {.cell-output .cell-output-display}\n![](intro_files/figure-pdf/cell-10-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n(section-cross-validation)=\n## k-Fold Cross-Validation\n\nPreviously we perform a random split and test our model in this case. What would happen if we fit our model on another split? We might get a different accuracy score. So in order to evaluate the performance of our model, it is natual to consider several different split and compute the accuracy socre for each case, and combine all these socres together to generate an index to indicate whehter our model is good or bad. This naive idea is called *k-Fold Cross-Validation*.\n\nThe algorithm is described as follows. We first randomly split the dataset into `k` groups. We use one of them as the test set, and the rest together forming the training set, and use this setting to get an accuracy score. We did this for each group to be chosen as the test set. Then the final score is the mean.\n\n`sklearn` provides a function `sklearn.model_selection.cross_val_score` to perform the above computation. The usage is straightforward, as follows.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.model_selection import cross_val_score\ncv_scores = cross_val_score(pipe, X, y, cv=5)\nprint(cv_scores)\nprint(np.mean(cv_scores))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.66666667 0.8        0.63333333 0.8        0.7       ]\n0.7200000000000001\n```\n:::\n:::\n\n\n## Choosing a `k` value\nIn the previous example we choose `k` to be `10` as an example. To choose a `k` value we usually run some test by trying different `k` and choose the one with the best performance. In this case, best performance means the highest cross-validation score.\n\n`sklearn.model_selection.GridSearchCV` provides a way to do this directly. We only need to setup the esitimator, the metric (which is the cross-validation score in this case), and the hyperparameters to be searched through, and `GridSearchCV` will run the search automatically.\n\nWe let `k` go from `1` to `100`. The code is as follows.\n\nNote that `parameters` is where we set the search space. It is a dictionary. The key is the name of the estimator plus double `_` and then plus the name of the parameter. \n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom sklearn.model_selection import GridSearchCV\nn_list = list(range(1, 101))\nparameters = dict(knn__n_neighbors=n_list)\nclf = GridSearchCV(pipe, parameters)\nclf.fit(X, y)\nprint(clf.best_estimator_.get_params()[\"knn__n_neighbors\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n35\n```\n:::\n:::\n\n\nAfter we fit the data, the `best_estimator_.get_params()` can be printed. It tells us that it is best to use `31` neibhours for our model. We can directly use the best estimator by calling `clf.best_estimator_`.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncv_scores = cross_val_score(clf.best_estimator_, X, y, cv=5)\nprint(np.mean(cv_scores))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.82\n```\n:::\n:::\n\n\nThe cross-validation score using `k=31` is calculated. This serves as a benchmark score and we may come back to dataset using other methods and compare the scores.\n\n\n\n\n\n\n<!-- {{< include knnproj2.ipynb >}} -->\n\n\n\n<!-- {{< include knnproj3.ipynb >}} -->\n\n\n# Exercises and Projects\n\n````{exercise} Handwritten example\n:label: ex2handwritten\nConsider the 1-dimensional data set shown below.\n\n```{list-table} Dataset\n:header-rows: 1\n\n* - $x$\n  - 1.5\n  - 2.5\n  - 3.5\n  - 4.5\n  - 5.0\n  - 5.5\n  - 5.75\n  - 6.5\n  - 7.5\n  - 10.5\n* - $y$\n  - $+$\n  - $+$\n  - $-$\n  - $-$\n  - $-$\n  - $+$\n  - $+$\n  - $-$\n  - $+$\n  - $+$\n```\nPlease use the data to compute the class of $x=5.5$ according to $k=1$, $3$, $6$ and $9$. Please compute everything by hand.\n````\n````{solution} ex2handwritten\n:class: dropdown\nNot yet done!\n````\n\n\n\n\n````{exercise} \n:label: ex2titanic\nPlease download the titanic dataset from {Download}`here<./assests/datasets/titanic.csv>`. This is the same dataset from what you dealt with in Chapter 1 Exercises. Therefore you may use the same way to prepare the data. \n\nPlease analyze the dataset and build a k-NN model to predict whether someone is survived or not. Note that you have to pick `k` at the end.\n````\n\n````{solution} ex2titanic\n:class: dropdown\n\nNot yet done!\n````\n\n",
    "supporting": [
      "intro_files\\figure-pdf"
    ],
    "filters": []
  }
}